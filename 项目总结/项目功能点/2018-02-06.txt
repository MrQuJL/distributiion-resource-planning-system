2018/2/6

用户功能分析：
1. 录入用户信息的时候，不录入密码，使用默认密码

2. 加载所有的部门名称，用zTree显示

3. 在为用户分配角色的时候，要注意最小化授权，用最少的角色分配给
该用户所需要的权限

4. 用checkbox来选择角色

5. 超级管理员账号不可以删除，自己不能删除自己，所显示的用户只能是
我所在部门里有权限看到的用户（像淘汰子节点一样）

6. 用户只跟部门挂钩，不要和任何其他的表有关联

7. 日志：访问记录，操作记录

8. 系统表一般是不经常改动的表，为了存取的方便，一般要放到缓存组件里
用户表，部门表，区域表，菜单表，角色表一般是万年不动的，不要随便去改动

9. 数据库表设计的三大范式


第一范式：表中的字段都是原子的不可拆分的

第二范式：就是要求有主键，并且要求其他字段都要依赖于主键
1）为什么要有主键？没有主键就没有唯一性，没有唯一性就无法唯一确定一条记录，
无法确定一条记录说明这个表设计的不合理，所以需要主键。
2）其他字段为什么要依赖于主键？不依赖于主键就无法定位到他们，
其他字段组成的这行记录和主键表示的是同一个东西，而主键是唯一的，
所以他们只要依赖于主键，就使这条记录成了唯一的。

但是，我在设计角色-菜单，角色-部门，角色-区域这些多对多关系的映射表的时候
就没有遵守第二范式，没有给这些表添加主键，因为一个角色

第三范式：在第二范式的基础上消除传递依赖

就拿用户表来说，用户属于某个部门，所以用户表中就需要有以一个部门id字段，
那么需不需要部门名称这个字段呢？
不需要，因为加上这个字段的话数据就冗余了，因为我们可以通过部门id关联到
部门表从而查询到部门名称，所以不需要添加部门名称。
因为部门id要与部门表进行关联，所以必须要确保用户表的dept_id和部门表的dept_id
之间的一致性，就要给用户表的dept_id添加外键，这样才能确保数据的一致性，但是
我在设计这张表时并没有添加外键，因为有了外键，在向主表添加记录的时候，数据库会
去从表中查询一次，这就会影响主表数据的插入速度，影响系统的性能，影响用户的体验，
所以就没有添加外键，但是同时为了数据的一致性，我把确认部门id是否在部门表中
存在这一步操作放到了业务逻辑层由java代码来控制，这样就提高了数据的插入速度
减轻了数据库服务器的压力，提高了用户的体验，profit++


用户功能增删改查开发：
	查询功能 --> 使用分页，部门树的下拉选项zTree
	增加功能 --> 
	修改功能 --> 
	删除功能 --> 


