2018/1/22

1. 分页功能

轻量级的分页组件（现在分页一般由前台分页组件+后台模型组件<hibernate/mybatis方言差异>）
	* 在后台编写数据库工具方言，屏蔽数据库分页方法的差异(mybatis已经完成)
	* 在后台编写分页的工具类，屏蔽翻页动作带来的查询差异(mybatis已经完成)
	* 在后台编写分页条的java代码，方便页面统一生成分页条，减少页面代码重复

mysql: limit
SELECT * FROM TABLE A LIMIT beginrow, pagesize
beginrow从0开始,pagesize表示一页多少条记录

oracle: rownum
SELECT B.* FROM 
(SELECT rownum rn a.* FROM table a) B
WHERE B.rn BETWEEN beginrow AND endrow

sqlserver: top
SELECT TOP 100 id, name, sex FROM TABLE

可以在连接里面获取数据库的类型:
Connection con = DriverManager.getConnection(url, "admin", "admin"); // 连接到数据库
DatabaseMetaData dm = con.getMetaData();
dm.getDatabaseProductName();
dm.getDatabaseProductVersion();

2. 在后台根据前台使用的框架用StringBuffer统一封装分页条
String,StringBuffer,StringBuilder的区别?

1) 可变性：
String被final修饰，而且底层的char类型的数组也被final修饰，所以String不可变
StringBuffer和StringBuilder都继承自AbstractStringBuilder，它们的底层也是char
类型的数组，但是没有被final修饰，所以都是可变的

2）线程安全性：
String对象不可变，也可以理解为常量，所以是线程安全的
StringBuffer对方法加了同步锁，所以线程安全
StringBuilder没有对方法加同步锁，所以线程不安全

3）性能：
每次改变String类型的变量时（例如：+）都会生成一个新的对象，性能较低
StringBuffer每次都是改变自身的char数组所以不会生成新对象，性能比较好
StringBuilder和StringBuffer相比方法没有加同步锁，所以性能相对快一些，
但是，却要冒线程不安全的风险，所以还是推荐StringBuffer

StringBuilder(不安全) > StringBuffer(安全) > String(安全)

3. 分页查询的流程：

1）前台向后台传递查询条件，页数，每页的记录数
2）action调用service方法获取PageInfo对象
3）从PageInfo中获取dictList对象
4）通过封装的分页条工具类，根据pageInfo的相关信息封装分页条
5）将上面两部分内容转化成json字符串发往前台
6）前台通过jquery操作DOM填充页面


4. 权限管理的概念:
	* 权限管理实现用户对系统访问的控制，按照既定的规则或者策略控制用户访问
	被授权的资源
	* 权限管理包括用户认证和用户授权两个部分

权限管理 -> 用户认证
	概念：用户访问系统，需要验证用户的正确性和合法性
	认证的几种方式：
		* 用户名和密码
		* 证书
		* 指纹
		* 二维码
		* 刷脸登录

	认证的流程(以用户名和密码认证为例):
		* 访问系统资源（如果是匿名访问资源可以省略验证）
		* 验证用户是否存在
		* 验证密码是否正确
		* 验证通过就可以访问系统资源

	用户认证的几个基本对象概念:
		* subject 主体 可以理解为用户也可以是其他系统或者访问系统的其他对象
		* principle 身份信息 就是主体的标示或者编码（用户名）
		* credential 凭证信息 比如：密码，证书，指纹，人脸...

权限管理 -> 用户授权
	概念：简单理解就是访问控制，用户认证通过后，系统对资源进行授权给用户，
	用户才能访问
	授权的流程：
		* 分配权限
		* 用户通过认证以后，即将访问系统资源
		* 要去查询该用户是否有访问该资源的权限
		* 如果有则访问，无则拒绝














