2018/1/23

1. 权限管理实现 -> 解决方案
	1). 粗粒度权限管理（按钮级别权限管理）
		* 概念：对资源类型的权限管理比如：菜单，url，按钮...
		
		* 实现：用基于url的拦截方式进行系统级别的处理（不会侵入到业务中去）
		比如：filter，interceptor，springAOP（前置通知）
		
		* 基于url的拦截方式用拦截器来实现（需要两个拦截器：认证拦截器，授权拦截器）
			认证拦截器：loginInterceptor
				a:定义身份信息对象principle
				b:在用户确认登录以后，将用户身份信息放到session
				c:编写登录拦截器，遇到除了匿名访问之外的url，判断session里面是否存在
				用户身份信息，如果有则认证成功，放行，否则跳转到登录页面或者拒绝访问
				页面
				d:配置拦截器
			授权拦截器：AuthorizationInterceptor
				a:在登录的LoginAction用户身份验证通过以后，从数据库获取该用户的授权信息
				b:编写授权拦截器，通过认证拦截器以后，进入授权拦截器，从session取出此次授权
				资源信息，查询此次访问的资源是否在用户的权限范围之内，若果是，放行，否则，
				转到拒绝访问页面
				c:配置拦截器

	2). 细粒度权限管理
		* 概念：不仅对资源类型进行权限管理，还对资源实例进行管理，
		比如：本不能员工只能查看本部门信息，不能查看其它部门信息
		
		* 细粒度级别的权限管理，因为没有共性，所以不能进行系统级别
		的处理，只能放在业务逻辑中单独处理

2. 在系统内部可以通过单点登录访问另外一个系统的资源，所以在菜单表里面设置一个target字段，
用来指明此次连接的目的地，href字段表示资源的uri

3. 自己定义的拦截器一般放在struts2默认的拦截器的前面，放在后面的话，struts2的n多拦截器会
先执行，太浪费性能

4. 实现菜单管理的根据用户id获取用户所能够操作的菜单列表




















